// SPDX-License-Identifier: MIT â€” See LICENSE for full terms
// Created by Patrick Woo, 2025.
// This file is part of the FPS-R (Frame-Persistent Stateless Randomisation) project.
// https://github.com/patwooky/FPSR_Algorithm

// ============================================================================
//
//  FPS-R ALGORITHMS - SELF-CONTAINED MAYA EXPRESSIONS
//
// ============================================================================
// FPS-R (Frame-Persistent Stateless Randomisation) is a set of algorithms that
// generate frame-persistent and stateless random values. 
// This file contains two stateless, frame-persistent randomization algorithms.
// It uses a custom portable_rand() function to ensure deterministic and
// consistent results across any platform.
//
//  INSTRUCTIONS:
//  1. Choose either the "Stacked Modulo (SM)" or "Quantised Switching (QS)"
//     expression block below.
//  2. Copy the ENTIRE block of code for your chosen algorithm.
//  3. Paste it directly into the Maya Expression Editor for an attribute
//     (e.g., pCube1.translateX).
//  4. Modify the parameters and the final line (e.g., `pCube1.translateX = $randVal;`)
//     to suit your needs.
//
//  These expressions are self-contained and do NOT require you to run
//  anything in the Script Editor beforehand.
//
//  But they can also be converted to global procedures and run (once every session) 
//  and then called from unlimited expressions instances in that session, if you prefer.
//
// ============================================================================


// ============================================================================
// EXPRESSION 1: Stacked Modulo (SM) - Self-Contained
// ============================================================================
/******************************************************************************/
/* FPS-R: Stacked Modulo (SM)                                                 */
/******************************************************************************/
/**
 * @brief Generates a persistent random value that holds for a calculated duration.
 * @details This function uses a two-step process. First, it determines a random
 * "hold duration". Second, it generates a stable integer for that duration,
 * which is then used as a seed to produce the final, held random value.
 *
 * int $frame: The current frame or time input. (In expressions, use the global 'frame' variable)
 * int $minHold: The minimum duration (in frames) for a value to hold.
 * int $maxHold: The maximum duration (in frames) for a value to hold.
 * int $reseedInterval: The fixed interval at which a new hold duration is calculated.
 * int $seedInner: An offset for the random duration calculation to create unique sequences.
 * int $seedOuter: An offset for the final value calculation to create unique sequences.
 * int $finalRandSwitch: A flag that can turn off the final randomisation step.
 * @return
 * when $finalRandSwitch is 0:
 * An integer value representing the currently held frame
 * that remains constant for the hold duration.
 * when $finalRandSwitch is 1:
 * A float value between 0.0 and 1.0 that remains constant for the hold duration.
 */
// --- Start of Stacked Modulo (SM) Expression ---

// A simple, portable pseudo-random number generator that takes an integer seed.
// Different languages have different rand() implementations, so using a custom
// one like this ensures identical results on any platform.
proc float portable_rand(int $seed) {
    // A common technique for a simple hash-like random number.
    // The large prime numbers are used to create a chaotic, unpredictable result.
    float $result = sin((float)$seed * 12.9898) * 43758.5453;
    // Use `$result - floor($result)` as a replacement for frac() for older Maya versions.
    // This ensures the result is always a positive value in the [0, 1) range.
    return $result - floor($result);
}

// Generates a persistent random value that holds for a calculated duration.
proc float fpsr_sm(
    int $frame, int $minHold, int $maxHold,
    int $reseedInterval, int $seedInner, int $seedOuter, int $finalRandSwitch)
{
    // --- 1. Calculate the random hold duration ---
    if ($reseedInterval < 1) { $reseedInterval = 1; } // Prevent division by zero.

    float $rand_for_duration = portable_rand($seedInner + $frame - ($frame % $reseedInterval));
    int $holdDuration = (int)floor($minHold + $rand_for_duration * ($maxHold - $minHold));

    if ($holdDuration < 1) { $holdDuration = 1; } // Prevent division by zero.

    // --- 2. Generate the stable integer "state" for the hold period ---
    int $held_integer_state = ($seedOuter + $frame) - (($seedOuter + $frame) % $holdDuration);

    // --- 3. Use the stable state as a seed for the final random value ---
    float $fpsr_output = 0.0;
    if ($finalRandSwitch) {
        $fpsr_output = portable_rand($held_integer_state);
    } else {
        $fpsr_output = $held_integer_state;
    }
    return $fpsr_output;
}

// --- Main Expression Logic (SM) ---

// Parameters
int $minHoldFrames = 16; // probable minimum held period
int $maxHoldFrames = 24; // maximum held period before cycling
int $reseedFrames = 9; // inner mod cycle timing
int $offsetInner = -41; // offsets the inner frame
int $offsetOuter = 23; // offsets the outer frame
int $finalRandSwitch = 1; // 1 to apply the final randomisation step, 0 to skip it

// Call the FPS-R:SM function
float $randVal =
    fpsr_sm(
        frame, $minHoldFrames, $maxHoldFrames,
        $reseedFrames, $offsetInner, $offsetOuter, $finalRandSwitch);

/*
// Optional: check if the value has changed from the previous frame
float $randVal_previous =
    fpsr_sm(
        (frame-1), $minHoldFrames, $maxHoldFrames,
        $reseedFrames, $offsetInner, $offsetOuter, $finalRandSwitch);
int $changed = 0;
if ($randVal != $randVal_previous) {
    $changed = 1;
}
*/

// ASSIGN THE FINAL VALUE to your object's attribute.
// ** IMPORTANT: CHANGE "pCube1.translateY" to your target attribute! **
// pCube1.translateY = $randVal;


// --- End of Stacked Modulo (SM) Expression ---




// ============================================================================
// EXPRESSION 2: Quantised Switching (QS) - Self-Contained
// ============================================================================
/**
 * @brief Generates a flickering, quantised value by switching between two sine wave streams.
 * @details This function creates two separate, quantised sine waves and switches
 * between them at a fixed interval to create complex, glitch-like patterns.
 *
 * int $frame: The current frame or time input.
 * float $baseWaveFreq: The base frequency for the modulation wave of stream 1.
 * float $stream2FreqMult: A multiplier for the second stream's frequency. If < 0, a default is used.
 * int $quantLevelsMinMax[]: An array of two integers for the min and max quantisation levels.
 * int $streamsOffset[]: An array of two integers to offset the frame for each stream.
 * int $streamSwitchDur: The number of frames after which the streams switch. If < 1, a default is derived.
 * int $stream1QuantDur: The duration for stream 1's quantisation switch. If < 1, a default is derived.
 * int $stream2QuantDur: The duration for stream 2's quantisation switch. If < 1, a default is derived.
 * int $finalRandSwitch: A flag that can turn off the final randomisation step.
 * @return: A float value between 0.0 and 1.0 that remains constant for the hold duration.
 */
// --- Start of Quantised Switching (QS) Expression ---

// A simple, portable pseudo-random number generator.
proc float portable_rand(int $seed) {
    float $result = sin((float)$seed * 12.9898) * 43758.5453;
    // Use `$result - floor($result)` as a replacement for frac() for older Maya versions.
    // This ensures the result is always a positive value in the [0, 1) range.
    return $result - floor($result);
}

// Generates a flickering, quantised value by switching between two sine wave streams.
proc float fpsr_qs(
    int $frame, float $baseWaveFreq, float $stream2FreqMult,
    int $quantLevelsMinMax[], int $streamsOffset[],
    int $streamSwitchDur, int $stream1QuantDur, int $stream2QuantDur,
    int $finalRandSwitch)
{
    // --- 1. Set default durations if not provided ---
    if ($streamSwitchDur < 1) { $streamSwitchDur = (int)floor((1.0 / $baseWaveFreq) * 0.76); }
    if ($stream1QuantDur < 1) { $stream1QuantDur = (int)floor((1.0 / $baseWaveFreq) * 1.2); }
    if ($stream2QuantDur < 1) { $stream2QuantDur = (int)floor((1.0 / $baseWaveFreq) * 0.9); }
    if ($streamSwitchDur < 1) { $streamSwitchDur = 1; }
    if ($stream1QuantDur < 1) { $stream1QuantDur = 1; }
    if ($stream2QuantDur < 1) { $stream2QuantDur = 1; }

    // --- 2. Calculate quantisation levels for each stream ---
    int $s1_quant_level;
    if (($streamsOffset[0] + $frame) % $stream1QuantDur < $stream1QuantDur * 0.5) {
        $s1_quant_level = $quantLevelsMinMax[0];
    } else {
        $s1_quant_level = $quantLevelsMinMax[1];
    }

    int $s2_quant_level;
    float $STREAM2_QUANT_RATIO_MIN = 1.24;
    float $STREAM2_QUANT_RATIO_MAX = 0.66;
    if (($streamsOffset[1] + $frame) % $stream2QuantDur < $stream2QuantDur * 0.5) {
        $s2_quant_level = (int)floor($quantLevelsMinMax[0] * $STREAM2_QUANT_RATIO_MIN);
    } else {
        $s2_quant_level = (int)floor($quantLevelsMinMax[1] * $STREAM2_QUANT_RATIO_MAX);
    }
    if ($s1_quant_level < 1) { $s1_quant_level = 1; }
    if ($s2_quant_level < 1) { $s2_quant_level = 1; }

    // --- 3. Generate the two quantised sine wave streams ---
    float $STREAM2_DEFAULT_FREQ_MULT = 3.7;
    if ($stream2FreqMult < 0) { $stream2FreqMult = $STREAM2_DEFAULT_FREQ_MULT; }

    float $stream1 = floor(sin((float)($streamsOffset[0] + $frame) * $baseWaveFreq) * $s1_quant_level) / $s1_quant_level;
    float $stream2 = floor(sin((float)($streamsOffset[1] + $frame) * $baseWaveFreq * $stream2FreqMult) * $s2_quant_level) / $s2_quant_level;

    // --- 4. Switch between the two streams ---
    float $active_stream_val = 0.0;
    if (($frame % $streamSwitchDur) < $streamSwitchDur / 2) {
        $active_stream_val = $stream1;
    } else {
        $active_stream_val = $stream2;
    }

    // --- 5. Hash the final output to create a random-looking value ---
    float $fpsr_output = 0.0;
    if ($finalRandSwitch) {
        $fpsr_output = portable_rand(int($active_stream_val * 100000.0));
    } else {
        $fpsr_output = 0.5 * $active_stream_val + 0.5; // Scale from [-1, 1] to [0, 1]
    }
    return $fpsr_output;
}

// --- Main Expression Logic (QS) ---

// Parameters
float $baseWaveFreq = 0.012; // Base frequency for the modulation wave of stream 1
float $stream2freqMult = 3.1; // Multiplier for the second stream's frequency
int $quantLevelsMinMax[] = {12, 22}; // Min, Max quantisation levels for the two streams
int $streamsOffset[] = {0, 76}; // Offset for the two streams
int $streamSwitchDur = 24; // Duration for switching streams in frames
int $stream1QuantDur = 16; // Duration for the first stream's quantisation switch cycle in frames
int $stream2QuantDur = 20; // Duration for the second stream's quantisation switch cycle in frames
int $finalRandSwitch = 1; // 1 to apply the final randomisation step, 0 to skip it

// Call the FPS-R:QS function
float $randVal = fpsr_qs(
    frame, $baseWaveFreq, $stream2freqMult, $quantLevelsMinMax,
    $streamsOffset, $streamSwitchDur, $stream1QuantDur, $stream2QuantDur, $finalRandSwitch);

/*
// Optional: check if the value has changed from the previous frame
float $randVal_previous = fpsr_qs(
    (frame - 1), $baseWaveFreq, $stream2freqMult, $quantLevelsMinMax,
    $streamsOffset, $streamSwitchDur, $stream1QuantDur, $stream2QuantDur, $finalRandSwitch);
int $changed = 0;
if ($randVal != $randVal_previous) {
    $changed = 1;
}
*/

// ASSIGN THE FINAL VALUE to your object's attribute.
// ** IMPORTANT: CHANGE "pCube1.visibility" to your target attribute! **
// pCube1.visibility = ($randVal > 0.5);


// --- End of Quantised Switching (QS) Expression ---
